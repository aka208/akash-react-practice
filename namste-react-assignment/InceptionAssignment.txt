What is Emmet?

Emmet is a free, open-source plugin that helps web developers create repetitive structures like tables, lists, or ordered elements with minimal typing. It's built into many text editors like Visual Studio Code (VS Code), and is enabled by default in the following files:
HTML, Haml, Pug, Slim, JSX, XML, XSL, CSS, SCSS, SASS, Less, and Stylus.

Difference between a Library and Framework?

A framework is a pre-built structure that provides a foundation on which you can build your application. It typically dictates the architecture of your application and provides a set of rules, guidelines, and functionalities to streamline the development process. Frameworks are more comprehensive and prescriptive compared to libraries.
A library, on the other hand, is a collection of reusable code that provides specific functionalities that you can use in your application. Unlike frameworks, libraries do not dictate the overall structure of your application and are usually more flexible in how they can be used.

What is CDN? Why do we use it?

A content delivery network (CDN) is a geographically distributed group of servers that caches content close to end users. A CDN allows for the quick transfer of assets needed for loading Internet content, including HTML pages, JavaScript files, stylesheets, images, and videos.

Why is React known as React?

React is called "React" because of the way it handles user interfaces. The name "React" reflects the core idea behind the library, which is to efficiently update the user interface in response to changes in application state.
React introduces a declarative approach to building UIs, where you describe how your UI should look based on the current state, and React takes care of updating the DOM to match this desired state. This reactive approach to building UIs is where the name "React" comes from.

What is crossorigin in script tag?

The crossorigin attribute in a <script> tag is used to specify how the browser should handle loading the script if it is hosted on a different origin (domain, protocol, or port) than the current page. This attribute is important for security reasons, as it helps prevent certain types of cross-origin attacks, such as cross-site scripting (XSS).
When you include a script from a different origin, the browser may enforce restrictions on accessing the script's contents or executing it in the context of your page. The crossorigin attribute allows you to control these restrictions.
Here's how you can use the crossorigin attribute in a <script> tag:

<script src="https://example.com/script.js" crossorigin="anonymous"></script>

In this example, the crossorigin="anonymous" attribute tells the browser to load the script without sending any user credentials (such as cookies or HTTP authentication) along with the request. This is suitable for scripts that are intended to be publicly accessible and don't require any sensitive information.
If the script does require credentials to be sent, you can use crossorigin="use-credentials":

<script src="https://example.com/script.js" crossorigin="use-credentials"></script>
This attribute tells the browser to include user credentials with the request, if available. This is useful for scripts that are hosted on the same origin as your page but are served with a different domain (e.g., a CDN) and require access to cookies or other authentication information.
If the crossorigin attribute is not specified, the browser will use its default behavior, which may vary depending on the specific context. It's generally a good practice to specify the crossorigin attribute when including scripts from different origins to ensure proper security measures are in place.
What is diference between React and ReactDOM

What is difference between react.development.js and react.production.js files via CDN?

The difference between react.development.js and react.production.js files via CDN lies in how they are optimized for development and production environments, respectively.

react.development.js:

This file is intended for development purposes.
It includes helpful warnings and error messages in the console to aid developers in identifying and fixing issues.
The file size is typically larger compared to the production version because it includes additional code for development tools and debugging.

react.production.js:

This file is optimized for production use.
It does not include any development-specific warnings or debugging information, making it smaller in size and more efficient.
The production version is suitable for deployment in live environments where performance and file size are critical factors.
When using React in a production environment, it's recommended to use react.production.js to minimize the size of your application bundle and improve its performance. However, during development, it's often more convenient to use react.development.js for its debugging and error-reporting capabilities.

What is async and defer? - see my Youtube video

async and defer are attributes that can be used with the <script> tag in HTML to control how external scripts are loaded and executed in the browser.

async:
The async attribute tells the browser to download the script file asynchronously while the rest of the page continues to load.
The script will be executed as soon as it is downloaded, which means it may not maintain the order in which scripts are defined on the page.
Use async when the script can be executed independently of other scripts or the DOM.
Example with async:

<script src="script.js" async></script>
defer:
The defer attribute tells the browser to download the script file asynchronously but defer its execution until after the document has been parsed.
Scripts with the defer attribute will be executed in the order they appear in the document.
Use defer when the script relies on the DOM being fully parsed and other scripts not being executed yet.
Example with defer:

<script src="script.js" defer></script>
In summary, async is used when the script can be executed independently and order is not important, while defer is used when the script needs to wait for the DOM to be fully parsed and order of execution matters.